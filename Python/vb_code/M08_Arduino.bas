Attribute VB_Name = "M08_Arduino"
Option Explicit

' Die MobaLedLib wird nur dann Installiert wenn sie nicht vorhanden ist
' - Das Excel sheet würde sich selber überschreiben

' Comma separeted list of libraries (Case sensitive => check the library.property file
' The MCP_CAN lib can't be installed from the IDE because
'  - it's not available in the library manager
'  - the debug mode is enabled in the version on GitHub
' => It's included to the program directory


Private Start_Compile_Time As Variant

'---------------------------------------------
Public Function Use_Excel_Console() As Boolean                              ' 01.12.20:
'---------------------------------------------
  Use_Excel_Console = Get_Bool_Config_Var("Use_Excel_Console")
End Function

Public Function LEDNr_Display_Type() As Long                ' 04.03.21: Juergen
'---------------------------------------------
  LEDNr_Display_Type = Get_Num_Config_Var("LEDNr_Display_Type")
End Function

Private Sub Test_Cmd_Admin()
  Shell "cmd runas /user:Administrator cmd /c"
End Sub

'-------------------------------------------
Public Function Find_ArduinoExe() As String
'-------------------------------------------
  Const ARDUINO_EXE = "arduino_debug.exe"
  Const Dirs = "  C:\Program Files (x86)\Arduino\" & ARDUINO_EXE & vbCr & _
               "  C:\Program Files\Arduino\" & ARDUINO_EXE
  Dim FileName As Variant
  For Each FileName In Split(Dirs, vbCr)
      FileName = Trim(FileName)
      If Dir(FileName) <> "" Then
         Find_ArduinoExe = FileName
         Exit Function
      End If
  Next
  If MsgBox(Get_Language_Str("Fehler: Die Arduino Entwicklungsumgebung ist nicht oder nicht im Standard Verzeichnis installiert." & vbCr & _
         "Das Programm muss abhängig vom Betriebssystem hier installiert sein:") & vbCr & _
         Dirs & vbCr & _
         vbCr & _
         Get_Language_Str("Achtung: Die 'App' Version der Arduino IDE wird nicht unterstützt. " & vbCr & _
         "Es muss die 'Windows Installer, for Windows XP and up' Version installiert werden." & vbCr & _
         vbCr & _
         "Soll die Arduino Webseite geöffnet werden damit die richtige Version herunter geladen werden kann ?"), vbCritical + vbYesNo, _
         Get_Language_Str("Fehler: '") & ARDUINO_EXE & Get_Language_Str("' nicht gefunden")) = vbYes Then
     Shell "Explorer ""https://www.arduino.cc/en/main/software"""
  End If

  EndProg
End Function


'-----------------------------------------------------
Public Function GetShortPath(Path As String) As String                      ' 23.07.20: Jürgen
'-----------------------------------------------------
  If Path = "" Then Exit Function
  'Add a reference to Microsoft Scripting Runtime
  Static fso As FileSystemObject
  If fso Is Nothing Then
      Set fso = New FileSystemObject
  End If

  'If the path is a file - Output the full path in 8.3 format
  If fso.FileExists(Path) Then
      GetShortPath = fso.GetFile(Path).ShortPath
      Exit Function
  End If

  'If the path is a folder - Output the full path in 8.3 format
  If fso.FolderExists(Path) Then
      GetShortPath = fso.GetFolder(Path).ShortPath
      Exit Function
  End If
  MsgBox "Internal error: 'GetShortPath()' was called with the invalid path: '" & Path & "'", vbCritical, "Internal error" ' 04.11.20:
  EndProg
End Function

'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Function Create_Start_Sub(BoardName As String, ResultName As String, ComPort As String, BuildOptions As String, InoName As String, SrcDir As String, CPUType As String) As String  ' 13.11.20: Extracted out of Create_Cmd_file
'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Dim fp As Integer, Name As String, FindStr As String, CMD_Name As String
  
  If BoardName = "PICO" Then
    Dim Board_Version As String
    Board_Version = Get_Lib_Version("rp2040:rp2040")
    If Board_Version = "" Then
         MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & _
                             "  '" & "Raspberry Pico Board" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
        Exit Function
    End If
  End If
  
  CMD_Name = "Start_" & BoardName & "_Sub.cmd"
  fp = FreeFile
  Name = SrcDir & CMD_Name
  On Error GoTo WriteError
  Open Name For Output As #fp
  Print #fp, "@ECHO OFF"
  Print #fp, "REM This file was generated by '" & ThisWorkbook.Name & "'  " & Time
    
  If Win10_or_newer() Then                                              ' 20.06.20: The find command dosn't work with this code page at Win7 for some reasons. It waits endless ?!?
     Print #fp, "CHCP 65001 >NUL" ' change the code page to show the correct german umlauts (ä,ö,ü, ...)
  End If
  Print #fp, ""
  
  If Get_Bool_Config_Var("Use_PlatformIO") = False Then
  
    FindStr = " 2>&1 | find /v ""Set log4j store directory"" | find /v "" StatusLogger "" | find /v ""serial.SerialDiscovery""" ' Used "find /v" to hide unwanted debug messages ' 23.07.20:
      
    '*** 14.07.20: Faster way to compile from Jürgen (10 sec instead of 22 sec) ***
    ' Create_PrivateBuild_cmd_if_missing SrcDir                           ' 28.10.20: Jürgen: Disabled
    If True = Get_Bool_Config_Var("Fast_Build_and_Upload") Then
      Dim BuildOptOnly As String, BaudRate As String, OptParts() As String, AddFastMethod As Boolean
      OptParts = Split(BuildOptions, " ")
      If UBound(OptParts) >= 1 Then
         If OptParts(0) = "--board" Then
            BuildOptOnly = OptParts(1)
        
            If InStr(BuildOptions, BOARD_NANO_OLD) Or InStr(BuildOptions, BOARD_UNO_NORM) > 0 Then
                  BaudRate = "57600"
            Else: BaudRate = "115200"
            End If
            Dim CommandStr As String
            CommandStr = """" & FilePath(Find_ArduinoExe) & """ """ & InoName & """ " & ComPort & " """ & BuildOptOnly & """ " & BaudRate & "  """ & GetShortPath(DelLast(Get_Ardu_LibDir())) & """ " & CPUType ' 23.07.20: Jürgen: Added: "GetShortPath()" 28.10.20 Jürgen added cpuType
            CommandStr = CommandStr + " %*"                                                                                                                                                                     ' 19.12.21: Jürgen: Added noflash option
            Print #fp, "if not exist MyPrivateBuildScript.cmd ("
            Print #fp, "  REM embedded Fast Build and Upload"
            Print #fp, "  call :build " + CommandStr
            Print #fp, ") else ("
            Print #fp, "  REM user defined Build and Upload"
            Print #fp, "  call MyPrivateBuildScript.cmd " + CommandStr
            Print #fp, ")"
            'CommandStr = "call privateBuild.cmd """ & FilePath(Find_ArduinoExe) & """ """ & InoName & """ " & ComPort & " """ & BuildOptOnly & """ " & BaudRate & "  """ & DelLast(Get_Ardu_LibDir()) & """"
            FindStr = ""
         End If
      End If
    End If
      
    Print #fp, "IF ERRORLEVEL 1 ECHO Start_Arduino_Result: %ERRORLEVEL% > """ & ResultName & """"
    Print #fp, "goto :eof"                                                ' 28.10.20: Jürgen
    Dim i As Long
    For i = 1 To 100 ' generate empty lines to hide the following to courious people (Jürgen)
        Print #fp, ""
    Next
    Print #fp, ":build"
    Create_Build BoardName, fp
  Else
      Dim Environment As String
      Environment = "nano_new"
      OptParts = Split(BuildOptions, " ")
      If UBound(OptParts) >= 1 Then
         If OptParts(0) = "--board" Then
            BuildOptOnly = OptParts(1)
          
            If InStr(BuildOptions, BOARD_NANO_OLD) Then
                Environment = "nano_old"
            ElseIf InStr(BuildOptions, BOARD_NANO_FULL) Then
                Environment = "nano_full"
            End If
        End If
      End If
      Create_PIO_Build fp, Environment, ResultName, ComPort, SrcDir          ' 13.02.22: Juergen
  End If


  Close #fp
  On Error GoTo 0
  Create_Start_Sub = "Call " & CMD_Name & " " & FindStr
    
  Exit Function
    
WriteError:
  Close #fp
  MsgBox Get_Language_Str("Fehler beim schreiben der Datei '") & Name & "'", vbCritical, Get_Language_Str("Fehler beim erzeugen der Arduino Start Datei")
End Function

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Function Create_PIO_Build(fp As Integer, Environment As String, ResultName As String, ComPort As String, SrcDir As String) As Boolean ' 13.02.22:
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      Print #fp, ""
      Print #fp, "set path=%path%;" & GetShortPath(Environ(Env_USERPROFILE)) & "\.platformio\penv\Scripts"
      Print #fp, "set " & Env_USERPROFILE & "=" & GetShortPath(Environ(Env_USERPROFILE))
      Print #fp, "cd .."
      Print #fp, "if ""%1""==""rebuild"" pio run -t clean -e " & Environment
      Print #fp, "set flash=-t upload"
      Print #fp, "if ""%1""==""noflash"" set flash="
      Print #fp, "pio run %flash% -e " & Environment & " --upload-port " & ComPort
      Print #fp, "IF ERRORLEVEL 1 ECHO Start_Arduino_Result: %ERRORLEVEL% > ""%~p0" & ResultName & """"
      Print #fp, "cd ""%~p0"""
      Print #fp, ""
      
      Dim fp2 As Integer
      fp2 = FreeFile
      Open SrcDir & "..\platformio.ini" For Output As #fp2
      'Open Replace(SrcDir, "\LEDs_AutoProg\", "\platformio.inx") For Output As #fp2
      Print #fp2, "[platformio]"
      Print #fp2, "src_dir = LEDs_AutoProg"
      Print #fp2, "    "
      Print #fp2, "[env]"
      Print #fp2, "framework = arduino"
      Print #fp2, "src_build_flags ="
      Print #fp2, "lib_deps ="
      Print #fp2, "    FastLED"
      Print #fp2, "    NmraDcc"
      Print #fp2, "    MobaLedLib=file://../../libraries/MobaLedLib"
      Print #fp2, ""
      Print #fp2, "[env:esp32]"
      Print #fp2, "Platform = espressif32"
      Print #fp2, "Board = esp32dev"
      Print #fp2, "src_filter = ${env.src_filter} -<pyProg_Generator_MobaLedLib/>"
      Print #fp2, "lib_deps = ${env.lib_deps}"
      Print #fp2, "    WiFiManager=https://github.com/tzapu/WiFiManager.git"
      Print #fp2, "    EspSoftwareSerial"
      If Not Write_PIO_Extension(fp2) Then
        Close #fp2
        Exit Function
      End If
      Print #fp2, "build_unflags = -Wall"
      Print #fp2, ""
      
      Print #fp2, "[env:nano_new]"
      Print #fp2, "Platform = atmelavr"
      Print #fp2, "Board = nanoatmega328new"
      Print #fp2, "src_filter = ${env.src_filter} -<pyProg_Generator_MobaLedLib/>"
      Print #fp2, "lib_deps = ${env.lib_deps}"
      Print #fp2, "    EEProm"
      Print #fp2, "    SPI"
      Print #fp2, "    AnalogScanner=https://github.com/merose/AnalogScanner/archive/master.zip"
      If Not Write_PIO_Extension(fp2) Then
        Close #fp2
        Exit Function
      End If
      Print #fp2, ""
      Print #fp2, "build_unflags = -Wall"
      Print #fp2, ""
      Print #fp2, "upload_flags ="
      Print #fp2, "    -u"
      Print #fp2, "    -V"
      
      Print #fp2, "[env:nano_old]"
      Print #fp2, "Platform = atmelavr"
      Print #fp2, "Board = nanoatmega328"
      Print #fp2, "src_filter = ${env.src_filter} -<pyProg_Generator_MobaLedLib/>"
      Print #fp2, "lib_deps = ${env.lib_deps}"
      Print #fp2, "    EEProm"
      Print #fp2, "    SPI"
      Print #fp2, "    AnalogScanner=https://github.com/merose/AnalogScanner/archive/master.zip"
      If Not Write_PIO_Extension(fp2) Then
        Close #fp2
        Exit Function
      End If
      Print #fp2, ""
      Print #fp2, "build_unflags = -Wall"
      Print #fp2, ""
      Print #fp2, "upload_flags ="
      Print #fp2, "    -u"
      Print #fp2, "    -V"
      
' 15.02.22: Hardi
      Print #fp2, "[env:nano_full]"
      Print #fp2, "Platform = atmelavr"
      Print #fp2, "Board = nanoatmega328full"
      Print #fp2, "src_filter = ${env.src_filter} -<pyProg_Generator_MobaLedLib/>"
      Print #fp2, "lib_deps = ${env.lib_deps}"
      Print #fp2, "    EEProm"
      Print #fp2, "    SPI"
      Print #fp2, "    AnalogScanner=https://github.com/merose/AnalogScanner/archive/master.zip"
      If Not Write_PIO_Extension(fp2) Then
        Close #fp2
        Exit Function
      End If
      Print #fp2, ""
      Print #fp2, "build_unflags = -Wall"
      Print #fp2, ""
      Print #fp2, "upload_flags ="
      Print #fp2, "    -u"
      Print #fp2, "    -V"
     
      Close #fp2
      
      Create_PIO_Build = True
End Function

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Function Create_Start_ESP32_Sub(ResultName As String, ComPort As String, BuildOptions As String, InoName As String, SrcDir As String, CPUType As String) As String ' 13.11.20:
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Const CMD_Name = "Start_ESP32_Sub.cmd"
  Dim BuildOptOnly As String, OptParts() As String, Board_Version As String, Tool_Version As String
  OptParts = Split(BuildOptions, " ")
  If UBound(OptParts) >= 1 Then
     If OptParts(0) = "--board" Then
        BuildOptOnly = OptParts(1)
     End If
  End If
  If BuildOptOnly = "" Then
     MsgBox Get_Language_Str("Fehler: die Build Optionen für den ESP32 sind ungültig:") & vbCr & _
                             "  '" & BuildOptions & "'", vbCritical, Get_Language_Str("Ungültige Build Optionen")
     Exit Function
  End If
  
  Board_Version = Get_Lib_Version("esp32:esp32")
  If Board_Version = "" Then
     MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & _
                             "  '" & "ESP32 Board" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
     Exit Function
  End If
  
  ' don't check for this optional library only                          ' 12.11.21 Juergen
  'If Get_Lib_Version("U8g2") = "" Then
  '   MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & _
  '                           "  '" & "U8g2: Library for monochrome display" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
  '   Exit Function
  'End If

  If Get_Lib_Version("CAN") = "" Then
     MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & _
                             "  '" & "CAN: Library for ESP32 CAN communication" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
     Exit Function
  End If

  ' don't check for this optional library only                          ' 12.11.21 Juergen
  'If Get_Lib_Version("WifiManager") = "" Then
  '   MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & _
  '                           "  '" & "WifiManager: Library for ESP32 Wifi access" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
  '   Exit Function
  'End If

  If Board_Version <> Get_Required_Version("esp32:esp32") Then
     MsgBox Get_Language_Str("Fehler: Die notwendige Version der Arduino Erweiterung ist nicht installiert: ") & _
                             "  '" & "ESP32 Board " & Get_Required_Version("esp32:esp32") & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
     Exit Function
  End If
  
  If VersionStr_is_Greater(Get_Required_Version("NmraDcc"), Get_Lib_Version("NmraDcc")) Then                      ' 9.3.21 Juergen: need at least 2.0.6
     MsgBox Get_Language_Str("Fehler: Die notwendige Version der Arduino Erweiterung ist nicht installiert: ") & _
                             "  '" & "NmraDcc " & Get_Required_Version("NmraDcc") & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
     Exit Function
  End If
  
  Tool_Version = Get_Lib_Version("esp32:tools\esptool_py")
  If Tool_Version = "" Then
     MsgBox Get_Language_Str("Fehler: Eine notwendige Arduino Erweiterung ist nicht installiert:") & vbCr & _
                             "  '" & "esptool_py" & "'", vbCritical, Get_Language_Str("Fehlende Erweiterung")
     Exit Function
  End If
 
  Dim fp As Integer, Name As String
  fp = FreeFile
  Name = SrcDir & CMD_Name
  On Error GoTo WriteError
  Open Name For Output As #fp
  Print #fp, "@ECHO OFF"
  Print #fp, "REM This file was generated by '" & ThisWorkbook.Name & "'  " & Time
  Print #fp, ""
  Print #fp, "REM Build script to compile an ESP32 for the MobaLedLib by Juergen"
  Print #fp, "REM"
  Print #fp, "REM When the script is called the first time all libraries have to be compiled"
  Print #fp, "REM This will tace up to 3 minutes. When the ESP is updated the next time only"
  Print #fp, "REM the changed files have to be processed which will speed up the build process"
  Print #fp, "REM dramatically"
  Print #fp, ""
  Print #fp, "REM Optional parameters:"
  Print #fp, "REM   rebuild     Rebuilds all (will take up to 3 minutes)"
  Print #fp, "REM   download    Send the hex file to the ESP"
  Print #fp, ""
  Print #fp, ""
    
  If Win10_or_newer() Then                                              ' 20.06.20: The find command dosn't work with this code page at Win7 for some reasons. It waits endless ?!?
     Print #fp, "CHCP 65001 >NUL" ' change the code page to show the correct german umlauts (ä,ö,ü, ...)
  End If
  
  If Get_Bool_Config_Var("Use_PlatformIO") = False Then
      Print #fp, ""
      Print #fp, "set ArduinoLib=" & GetShortPath(DelLast(Get_Ardu_LibDir()))  ' 02.12.21: Juergen see forum post #7085
      Print #fp, "if not exist MyPrivateBuildScript.cmd ("
      Print #fp, "       REM embedded Fast Build and Upload" ' esp32:esp32:esp32:PSRAM=disabled,PartitionScheme=default,CPUFreq=240,FlashMode=qio,FlashFreq=80,FlashSize=4M,UploadSpeed=921600,DebugLevel=none -vid-pid=10C4_EA60
      Print #fp, "       call :build """ & FilePath(Find_ArduinoExe) & """ ""LEDs_AutoProg.ino"" " & ComPort & " """ & BuildOptOnly & """ 115200  ""%ArduinoLib%"" esp32 %*"
      Print #fp, ") else ("
      Print #fp, "       REM user defined Build and Upload"
      Print #fp, "       call MyPrivateBuildScript.cmd """ & FilePath(Find_ArduinoExe) & """ ""LEDs_AutoProg.ino"" " & ComPort & " """ & BuildOptions & """ 115200  ""%ArduinoLib%"" esp32 %*"
      Print #fp, "       )"
      Print #fp, "IF ERRORLEVEL 1 ECHO Start_Arduino_Result: %ERRORLEVEL% > ""Start_Arduino_Result.txt"""
      Print #fp, "goto :eof"
      Print #fp, ""
      Print #fp, ""
      Print #fp, ""
      Print #fp, ":build"
      Print #fp, "REM                                                                           **** ToDo: Aktualisieren ***"
      Print #fp, "REM Compile and flash time for ESP 14 sec on Hardis laptop"
      Print #fp, "REM"
      Print #fp, "REM"
      Print #fp, "REM This file could be modified by the user to support special compiler switches"
      Print #fp, "REM It is called if the switch the ""Schnelles Build und Upload verwenden:"" in the 'Config' sheet is enabled"
      Print #fp, "REM"
      Print #fp, "REM Parameter:               Example"
      Print #fp, "REM  1: Arduino EXE Path:    """ & FilePath(Find_ArduinoExe) & """"
      Print #fp, "REM  2: Ino Name:            ""LEDs_AutoProg.ino"""
      Print #fp, "REM  3: Com port:            ""COM3"""
      Print #fp, "REM  4: Build options:       ""arduino:avr:nano:cpu=atmega328"""
      Print #fp, "REM  5: Baudrate:            ""57600"" or ""115200"""
      Print #fp, "REM  6: Arduino Library path ""%USERPROFILE%\Documents\Arduino\libraries"""
      Print #fp, "REM  7: CPU type:            ""atmega328p, atmega4809, esp32"""
      Print #fp, "REM  8: options:             ""noflash|norebuild"""                                     ' 19.12.21: Jürgen: Added noflash option
      Print #fp, "REM  additional argument from caller"
      Print #fp, "REM"
      Print #fp, "REM The program uses the captured and adapted command line from the Arduino IDE"
      Print #fp, "REM"
      Print #fp, ""
      Print #fp, "SET aHome=%~1"
      Print #fp, "SET fqbn=%~4"
      Print #fp, "SET lib=%~6"
      Print #fp, "SET ESP32_BOARD_VERSION=" & Board_Version
      Print #fp, "SET ESP32_TOOL_VERSION=" & Tool_Version
      Print #fp, ""
      Print #fp, "call :short aTemp ""%USERPROFILE%\AppData\Local\Temp\MobaLedLib_build\ESP32"""
      Print #fp, "SET aCache=%aTemp%\cache"
      Print #fp, "call :short packages ""%USERPROFILE%" + AppLoc_Ardu + "packages"""
      Print #fp, "if not exist ""%aTemp%\Sketch""  md ""%aTemp%\Sketch"""
      Print #fp, "if not exist ""%aCache%"" md ""%aCache%"""
      Print #fp, ""
      Print #fp, "SetLocal EnableDelayedExpansion"
      Print #fp, ""
      Print #fp, "copy ""..\LEDs_AutoProg\LEDs_AutoProg.h"" ""%aTemp%\Sketch"" >nul:"
      Print #fp, "if errorlevel 1 ("
      Print #fp, "   echo can't copy ..\LEDs_AutoProg\LEDs_AutoProg.h to build folder"
      Print #fp, "   exit /b 1"
      Print #fp, "   )"
      Print #fp, ""
      Print #fp, "call ::getDirectory headerDir ..\LEDs_AutoProg\LEDs_AutoProg.h"
      Print #fp, "call ::getDirectory sketchDir %2"
      Print #fp, ""
      Print #fp, "if not ""%headerDir%""==""%sketchDir%"" ("
      Print #fp, "   REM Necessary for rebuild         11.11.20:"
      Print #fp, "   copy ""..\LEDs_AutoProg\LEDs_AutoProg.h"" . >nul:"
      Print #fp, "   if errorlevel 1 ("
      Print #fp, "      echo can't copy ..\LEDs_AutoProg\LEDs_AutoProg.h to actual dir"
      Print #fp, "      exit /b 1"
      Print #fp, "      )"
      Print #fp, ")"
      Print #fp, "REM !! developer option copy additional files !!"
      Print #fp, "if exist AdditionalBuildFiles.txt ("
      Print #fp, "   echo updating extra files"
      Print #fp, "   for /F %%f in (AdditionalBuildFiles.txt) do ("
      Print #fp, "      if exist ""%%f"" ("
      Print #fp, "             echo update file %%f"
      Print #fp, "             copy ""%%f"" ""%aTemp%\Sketch"" >nul:"
      Print #fp, "             if errorlevel 1 ("
      Print #fp, "                echo can't copy %%file to build folder"
      Print #fp, "                exit /b 1"
      Print #fp, "             )"
      Print #fp, "      ) else ("
      Print #fp, "             echo Additional build file '%%f' not found"
      Print #fp, "             pause"
      Print #fp, "             )"
      Print #fp, "      )"
      Print #fp, ")"
      Print #fp, ""
      Print #fp, "rem check if prebuild targets exist and the current ino isn't newer"
      Print #fp, "set srcFile=%~2"
      Print #fp, "set cppFile=%aTemp%\sketch\%srcFile%.cpp"
      Print #fp, ""
    #If 1 Then                                               ' 01.12.20: Copy the file therefore all functions must have a forward definition
      Print #fp, "copy ""%srcFile%"" ""%cppFile%"" /Y >nul:" '           Advantage: Changes in the ino file don't require a rebuild
    #Else
      Print #fp, "if not exist ""%srcFile%""  ("
      Print #fp, "   echo File %cppFile% does not exist, rebuild ..."
      Print #fp, "   goto :rebuild"
      Print #fp, "   )"
    #End If
      Print #fp, ""
      Print #fp, "if exist ""%aTemp%\rebuildFailed.txt"" ("
      Print #fp, "   echo Last rebuild failed ;-("
      Print #fp, "   echo Press ENTER to rebuild everything"  ' If the error is located in the .ino file Ctrl+C could be pressed here
      Print #fp, "   if ""%8""=="""" pause"
      Print #fp, "   goto :rebuild"
      Print #fp, "   )"
      Print #fp, ""
      Print #fp, "rem if the pre-build files are not there we need to do a complete new build"
      Print #fp, "if not exist ""%cppFile%"" ("
      Print #fp, "   echo CPP File ""%cppFile%"" does'n exist, rebuild ..."
      Print #fp, "   goto :rebuild"
      Print #fp, "   )"
      Print #fp, ""
      Print #fp, "if ""%8""==""rebuild"" ("
      Print #fp, "   echo Rebuild called from the command line"
      Print #fp, "   goto :rebuild"
      Print #fp, "   )"
      Print #fp, ""
      Print #fp, "if ""%8""==""flash"" ("
      Print #fp, "   goto :download"
      Print #fp, "   )"
      Print #fp, ""
      Print #fp, "rem now get date/time of both files to see if time is equal"
      Print #fp, "FOR /F ""tokens=* USEBACKQ"" %%F IN (`forfiles /p ""%atemp%\sketch"" /m ""%srcFile%.cpp"" /C ""cmd /c echo @fdate @ftime""`) DO SET DATE1=%%F"
      Print #fp, "FOR /F ""tokens=* USEBACKQ"" %%F IN (`forfiles /m ""%srcFile%"" /C ""cmd /c echo @fdate @ftime""`) DO SET DATE2=%%F"
      Print #fp, ""
      Print #fp, "echo %srcFile%.cpp has date %date1%"
      Print #fp, "echo %srcFile% has date %date2%"
      Print #fp, ""
      Print #fp, "rem if equal then srcfile isn't newer"
      Print #fp, "IF ""%DATE1%""==""%DATE2%"" goto fastbuild"
      Print #fp, ""
      Print #fp, "rem now get the newest file"
      Print #fp, "rem to compare, both file must be in same directory"
      Print #fp, "copy ""%srcFile%"" ""%aTemp%\sketch\"" >nul:"
      Print #fp, "FOR /F %%i IN ('DIR /B /O:D ""%cppFile%"" ""%aTemp%\sketch\%srcFile%""') DO SET NEWEST=%%i"
      Print #fp, "del ""%aTemp%\sketch\%srcFile%"" >nul:"
      Print #fp, ""
      Print #fp, "rem check which file is newer, if source is new we need to run a arduino build to recreate the .ino.cpp file"
      Print #fp, "if ""%NEWEST%""==""%srcFile%"" ("
      Print #fp, "   echo New file detected ""%NEWEST%"", rebuild..."
      Print #fp, "   goto :rebuild"
      Print #fp, "   ) "
      Print #fp, "ECHO Newer file is %NEWEST%"
      Print #fp, ""
      Print #fp, "goto :fastbuild"
      Print #fp, ""
      Print #fp, ":getDirectory <resultVar> <pathVar>"
      Print #fp, "("
      Print #fp, "    set ""%~1=%~d2%~p2"""
      Print #fp, "    goto :eof"
      Print #fp, ")"
      Print #fp, ""
      Print #fp, ":getShortName <resultVar> <filename>"
      Print #fp, "("
      Print #fp, "    set %~1=%~s2"
      Print #fp, "    goto :eof"
      Print #fp, ")"
      Print #fp, ""
      Print #fp, ":fastbuild"
      Print #fp, "echo Running fastbuild"
      Print #fp, "call Fastbuild.cmd %8"
      Print #fp, "if errorlevel 1 ("                                            ' 28.11.20: Additional check from Jürgen
      Print #fp, "    rem use argument norebuild to avoid rebuild in this case"
      Print #fp, "    if not ""%8""==""norebuild"" ("                                        '           in case the librarys have been changed
      Print #fp, "        rem in case that FastBuild.cmd returned errolevel 9 also a rebuild won't help"
      Print #fp, "        if not errorlevel 9 ("
      Print #fp, "            echo Fastbuild failed, trying a rebuild..."
      Print #fp, "            goto rebuild"
      Print #fp, "        )"
      Print #fp, "    )"
      Print #fp, ")"
      Print #fp, ""
      Print #fp, "goto download"
      Print #fp, ""
      Print #fp, ":rebuild"
      Print #fp, "echo."
      Print #fp, "echo Running rebuild... Be patient, this will take up to 3 minutes ;-((("
      Print #fp, "echo."
      Print #fp, "if exist ""%aTemp%"" del ""%aTemp%"" /s/q >nul:"
      Print #fp, "if exist ""%aTemp%\link.cmd"" del ""%aTemp%\link.cmd"""
      Print #fp, "echo %date% > ""%aTemp%\rebuildFailed.txt"""
      Print #fp, ""
      Print #fp, "REM *** Call the arduino builder ***"
      Print #fp, "call :write ""%aHome%\arduino-builder"" -compile -logger=human ^"
      Print #fp, "     -hardware ""%packages%"" ^"
      Print #fp, "     -tools ""%aHome%\tools-builder"" ^"
      Print #fp, "     -tools ""%aHome%\hardware\tools\avr"" ^"
      Print #fp, "     -built-in-libraries ""%aHome%\libraries"" -libraries ""%LIB%"" ^"
      Print #fp, "     -fqbn=%fqbn% -build-path ""%aTemp%"" ^"
      Print #fp, "     -warnings=default ^"
      Print #fp, "     -build-cache ""%aCache%"" ^"
      Print #fp, "     -prefs=build.warn_data_percentage=75 ^"
      Print #fp, "     -prefs=runtime.tools.avrdude.path=""%aHome%\hardware\tools\avr"" ^"
      Print #fp, "     -prefs=runtime.tools.avr-gcc.path=""%aHome%\hardware\tools\avr"" >""%aTemp%\compile.cmd"""
      Print #fp, ""
      Print #fp, "if exist AdditionalBuildOptions.txt ("
      Print #fp, "  for /F ""delims="" %%i in (AdditionalBuildOptions.txt) do call :write %%i >>""%aTemp%\compile.cmd"""
      Print #fp, ")"
      Print #fp, "call :write %srcFile% >>""%aTemp%\compile.cmd"""
      Print #fp, ""
      Print #fp, "call ""%aTemp%\compile.cmd"""
      Print #fp, "if not errorlevel 1 ("
      Print #fp, "  if exist ""%aTemp%\rebuildFailed.txt"" del ""%aTemp%\rebuildFailed.txt"" >nul:"
      Print #fp, ")"
      Print #fp, ""
      Print #fp, ":download"
      Print #fp, "if ""%8""==""noflash"" goto :EOF"                                 ' 12.02.22: Juergen
      Print #fp, "if not errorlevel 1 ("
      Print #fp, "   set uploadTo=%3"
      Print #fp, "   if not ""%target%""=="""" set uploadTo=%target%"
      Print #fp, "   echo Uploading to !uploadTo!"
      Print #fp, ""
      Print #fp, "   REM *** Flash program ***"
      Print #fp, "   if ""!uploadTo:~0,3!""==""COM"" ("
      ' 17.11.20: Added: 0x8000 ...
      ' 11.03.21: Added: 0xE000 and 0x1000
      Print #fp, "          ""%packages%\esp32\tools\esptool_py\%ESP32_TOOL_VERSION%/esptool.exe"" --chip esp32 --port \\.\!uploadTo! --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect " & _
                     " 0xE000  ""%packages%\esp32\hardware\esp32\%ESP32_BOARD_VERSION%/tools/partitions/boot_app0.bin""" & _
                     " 0x1000  ""%packages%\esp32\hardware\esp32\%ESP32_BOARD_VERSION%/tools/sdk/bin/bootloader_qio_80m.bin""" & _
                     " 0x10000 ""%aTemp%\%srcFile%.bin""" & _
                     " 0x8000  ""%aTemp%\%srcFile%.partitions.bin"""
      Print #fp, "   ) else ("
      Print #fp, "          ""%packages%\esp32\hardware\esp32\%ESP32_BOARD_VERSION%/tools/espota.exe"" -i !uploadTo! -p 3232 --auth= -f ""%aTemp%\%srcFile%.bin"""
      Print #fp, "          )"
      Print #fp, "    REM *** caller expects a positive errorlevel in error case, but ESPTOOL returns errorlevel -1"   '02.03.21 Juergen
      Print #fp, "    if not errorlevel 0 exit /b 1"                                                                   '02.03.21 Juergen
      Print #fp, ""
      Print #fp, ")"
      Print #fp, "Goto :EOF"
      Print #fp, ""
      Print #fp, ":: write a text without newline"
      Print #fp, ":write"
      Print #fp, "echo | set /p x=""%* """
      Print #fp, "goto :eof"
      Print #fp, ""
      Print #fp, ":short"
      Print #fp, "set %1=%~s2"
      Print #fp, "goto :eof"
      Print #fp, ""
  Else
      Create_PIO_Build fp, "esp32", ResultName, ComPort, SrcDir          ' 13.02.22: Juergen
  End If
  Close #fp
  On Error GoTo 0
  Create_Start_ESP32_Sub = "Call " & CMD_Name
  Dim kk As Integer
  If GetAsyncKeyState(VK_SHIFT) <> 0 Then                             ' 12.03.21 Juergen: force a rebuild if CTRL key is pressed
    Create_Start_ESP32_Sub = Create_Start_ESP32_Sub + " rebuild"
  End If
 
  Exit Function
    
WriteError:
  Close #fp
  MsgBox Get_Language_Str("Fehler beim schreiben der Datei '") & Name & "'", vbCritical, Get_Language_Str("Fehler beim erzeugen der Arduino Start Datei")
End Function

'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Function Create_Cmd_file(ResultName As String, ComPort As String, BuildOptions As String, InoName As String, Mode As String, SrcDir As String, CPUType As String) As String ' 28.10.20: Jürgen: Added: CPUType
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' Arduino start Parameters see:
'   https://github.com/arduino/Arduino/blob/master/build/shared/manpage.adoc
'   https://forum.arduino.cc/index.php?topic=550577.0
'   http://inotool.org/
  
' 26.09.19:
' Manchmal Spinnt der Compiler. Er erzeugt seltsame Fehlermeldungen:
'    " internal compiler error: Segmentation fault "
' Wenn der Fehler ein mal komm, dann muss irgend was am Programm verädert werden,
' dann geht es meißtens wieder. Dann kann man die Änderung auch wieder rückgängig
' machen ohne das der Fehler wieder auftritt ;-(
'
' Wenn man das Verzeichnis "C:\Users\Hardi\AppData\Arduino_Build_23_B.LEDs_AutoProg"
' löscht, dann geht es auch ohne Änderung am Programm.
'
' Das Weglassen des Kommandozeilenschalters "--preserve-temp-files" bringt nichts.

' Das Problem ist hier beschrieben:
'  https://github.com/arduino/Arduino/issues/8821
'  https://github.com/arduino/Arduino/issues/7949
' Im zweiten Post wird behauptet, dass der Fehler mit der Version 1.8.10 nicht mehr auftritt.
' Dummerweise produziert diese sehr viele Debug Meldungen.
'
' Ich habe jetzt mal das Neueste Board Paket für den Nano (1.8.1) Installiert. Mal schauen ob es
' jetzt besser ist. Dummerweise habe ich mir nicht gemerkt welches Board Paket ich vorher hatte.
' Es war irgend was mit 1.6?
  Const USE_SUBCOMMAND = True


  If Dir(SrcDir & ResultName) <> "" Then Kill SrcDir & ResultName  ' 16.03.20: Added Thisworkbook...
  
  Dim CommandStr As String, BuildDir As String, BuildDirForScript
  
  #If 1 Then ' Use a separate Build directory. => Speed up 12 sec instead of 18
    BuildDir = Replace(Environ("APPDATA"), "Roaming", "") & "Arduino_Build_" & Replace(InoName, ".ino", "")
    BuildDirForScript = "%APPDATA%\..\" & "Arduino_Build_" & Replace(InoName, ".ino", "")  ' to avoid nonprintables
    If Dir(BuildDir & "\.") = "" Then
       On Error Resume Next ' In case the directory is created but empty
       MkDir BuildDir
       On Error GoTo 0
       BuildDirForScript = "%APPDATA%\..\" & "Arduino_Build_" & Replace(InoName, ".ino", "")
       'Debug.Print "BuildDir='" & BuildDir & "'"
    End If
  #End If
  
  ' Other options:  --verbose-build --verbose-upload"
  '   Boards  see: C:\P<rogram Files (x86)\Arduino\hardware\arduino\avr\boards.txt
  '   New Bootloader: nano.menu.cpu.atmega328=ATmega328P
  
  CommandStr = """" & Find_ArduinoExe() & """ """ & InoName & """ --upload --port \\.\" & ComPort & " " & BuildOptions   ' 28.10.20: Jürgen Added: "\\.\"
  If BuildDirForScript <> "" Then CommandStr = CommandStr & " --pref build.path=""" & BuildDirForScript & """" & _
                                                   " --preserve-temp-files"
                                                   
  Dim fp As Integer, Name As String, i As Integer
  
  If USE_SUBCOMMAND Then                                                    ' 16.03.20:
      If Get_BoardTyp() = "ESP32" Then                                      ' 13.11.20:
            CommandStr = Create_Start_ESP32_Sub(ResultName, ComPort, BuildOptions, InoName, SrcDir, CPUType)
      Else: CommandStr = Create_Start_Sub(Get_BoardTyp(), ResultName, ComPort, BuildOptions, InoName, SrcDir, CPUType)
      End If
      If CommandStr = "" Then Exit Function
  End If
  
  
  ' filter the SerialDiscovery messages                                     ' 16.03.20:
  'CommandStr = CommandStr & " 2>&1 | find /v "" StatusLogger "" | find /v ""serial.SerialDiscovery"" | find /v ""fungsvorgang..."""
  
  fp = FreeFile
  Name = SrcDir & "Start_Arduino.cmd"
  On Error GoTo WriteError
  Open Name For Output As #fp
  Print #fp, "@ECHO OFF"
  Print #fp, "REM This file was generated by '" & ThisWorkbook.Name & "'  " & Time
  Print #fp, ""
  Print #fp, "if exist """ & ResultName & """ del """ & ResultName & """"

Select Case Mode
  Case "Left":
          Print #fp, "COLOR 1F" ' White on Blue  (See: https://ss64.com/nt/color.html)
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
          Print #fp, "ECHO    ""    Zum                                                                  """
          Print #fp, "ECHO    ""     PC                    Prog_Generator " & AddSpaceToLen(Prog_Version, 20) & " by Hardi  """
          Print #fp, "ECHO    ""      \\                                                                 """
          Print #fp, "ECHO    ""       \\                                                                """
          Print #fp, "ECHO    ""    ____\\___________________                                            """
          Print #fp, "ECHO    ""   |  | [_] | | [_] |[oo]    |  " & Get_Language_Str("Achtung: Es muss der linke               """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("Arduino mit dem PC verbunden             """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("sein.                                    """)
          Print #fp, "ECHO    ""   |  | LED | |     |        |                                           """
          Print #fp, "ECHO    ""   |  | Nano| |     |        |  " & Get_Language_Str("Wenn alles gut geht, dann wird das       """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("Fenster ohne eine weitere Meldung        """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("geschlossen (Liest ja eh keiner).        """)
          Print #fp, "ECHO    ""   |  |_____| |_____| [O]    |                                           """
          Print #fp, "ECHO    ""   |    [@] [@] [@]          |  " & Get_Language_Str("Falls Probleme auftreten, dann wird      """)
          Print #fp, "ECHO    ""   |__________________[:::]__|  " & Get_Language_Str("das angezeigt.                           """)
          Print #fp, "ECHO    ""                                                                         """
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
        
  Case "Right"
          Print #fp, "COLOR 2F" ' White on Green
          Dim RightName As String
          Select Case Page_ID
             Case "DCC":       RightName = " DCC "
             Case "Selectrix": RightName = " S X "
             Case "Loconet":   RightName = "LocoN"
             Case Else:        MsgBox "Interner Fehler: Unbekante Page_ID: '" & Page_ID & "'", vbCritical, "Interner Fehler"
                               EndProg
          End Select
        
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
          Print #fp, "ECHO    ""            Zum                                                          """
          Print #fp, "ECHO    ""             PC            Prog_Generator " & AddSpaceToLen(Prog_Version, 20) & " by Hardi  """
          Print #fp, "ECHO    ""              \\                                                         """
          Print #fp, "ECHO    ""               \\                                                        """
          Print #fp, "ECHO    ""    ____________\\___________                                            """
          Print #fp, "ECHO    ""   |  | [_] | | [_] |[oo]    |  " & Get_Language_Str("Achtung: Es muss der rechte              """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("Arduino mit dem PC verbunden             """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("sein.                                    """)
          Print #fp, "ECHO    ""   |  |     | |" & RightName & _
                                                   "|        |                                           """
          Print #fp, "ECHO    ""   |  |     | | Nano|        |  " & Get_Language_Str("Wenn alles gut geht, dann wird das       """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("Fenster ohne eine weitere Meldung        """)
          Print #fp, "ECHO    ""   |  |     | |     |        |  " & Get_Language_Str("geschlossen (Liest ja eh keiner).        """)
          Print #fp, "ECHO    ""   |  |_____| |_____| [O]    |                                           """
          Print #fp, "ECHO    ""   |    [@] [@] [@]          |  " & Get_Language_Str("Falls Probleme auftreten, dann wird      """)
          Print #fp, "ECHO    ""   |__________________[:::]__|  " & Get_Language_Str("das angezeigt.                           """)
          Print #fp, "ECHO    ""                                                                         """
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
  
  
  Case "CAN"
          Print #fp, "COLOR 3F" ' White on Aqua
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
          Print #fp, "ECHO    ""    Zum                                                                  """
          Print #fp, "ECHO    ""     PC                    Prog_Generator " & AddSpaceToLen(Prog_Version, 20) & " by Hardi  """
          Print #fp, "ECHO    ""      \\                                                                 """
          Print #fp, "ECHO    ""       \\                                                                """
          Print #fp, "ECHO    ""    ____\\___________________                                            """
          Print #fp, "ECHO    ""   |  | [_] |O _________    _|  " & Get_Language_Str("Achtung: Es  wird nur der linke          """)
          Print #fp, "ECHO    ""   |  |     | |         |  |C|  " & Get_Language_Str("Arduino und ein MCP2515 CAN Modul        """)
          Print #fp, "ECHO    ""   |  |     | | MCP2515 |  |A|  " & Get_Language_Str("verwendet.                               """)
          Print #fp, "ECHO    ""   |  | LED | |   CAN   |  |N|                                           """
          Print #fp, "ECHO    ""   |  | Nano| |  Modul  |   ~|  " & Get_Language_Str("Wenn alles gut geht, dann wird das       """)
          Print #fp, "ECHO    ""   |  |     | |_________|    |  " & Get_Language_Str("Fenster ohne eine weitere Meldung        """)
          Print #fp, "ECHO    ""   |  |     |                |  " & Get_Language_Str("geschlossen (Liest ja eh keiner).        """)
          Print #fp, "ECHO    ""   |  |_____|         [O]    |                                           """
          Print #fp, "ECHO    ""   |    [@] [@] [@]          |  " & Get_Language_Str("Falls Probleme auftreten, dann wird      """)
          Print #fp, "ECHO    ""   |__________________[:::]__|  " & Get_Language_Str("das angezeigt.                           """)
          Print #fp, "ECHO    ""                                                                         """
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
  
  Case "ESP32" ' 13.11.20:
          Print #fp, "COLOR 1E" ' Yellow on Blue
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
          Print #fp, "ECHO    ""        Zum                                                              """
          Print #fp, "ECHO    ""         PC                Prog_Generator " & AddSpaceToLen(Prog_Version, 19) & " by Juergen """
          Print #fp, "ECHO    ""          \\                                                   and Hardi """
          Print #fp, "ECHO    ""           \\                                                            """
          Print #fp, "ECHO    ""    ________\\_______________                                            """
          Print #fp, "ECHO    ""   |    | # [_] # |  [oo]   _|  " & Get_Language_Str("Achtung: Es wird nur ein ESP32           """)
          Print #fp, "ECHO    ""   |    |         |  DCC   |C|  " & Get_Language_Str("         Modul verwendet.                """)
          Print #fp, "ECHO    ""   |    | ::::::: |        |A|                                           """
          Print #fp, "ECHO    ""   |    |  _____  |        |N|                                           """
          Print #fp, "ECHO    ""   |    | |     | |         ~|  " & Get_Language_Str("Wenn alles gut geht, dann wird das       """)
          Print #fp, "ECHO    ""   |    | |ESP32| |          |  " & Get_Language_Str("Fenster ohne eine weitere Meldung        """)
          Print #fp, "ECHO    ""   |    | |_____| |          |  " & Get_Language_Str("geschlossen (Liest ja eh keiner).        """)
          Print #fp, "ECHO    ""   |    |_________|   [O]    |                                           """
          Print #fp, "ECHO    ""   |    [@] [@] [@]          |  " & Get_Language_Str("Falls Probleme auftreten, dann wird      """)
          Print #fp, "ECHO    ""   |__________________[:::]__|  " & Get_Language_Str("das angezeigt.                           """)
          Print #fp, "ECHO    ""                                                                         """
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
  Case "PICO" ' 18.04.21:
          Print #fp, "COLOR 0E" ' Yellow on Black
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
          Print #fp, "ECHO    ""        Zum                                                              """
          Print #fp, "ECHO    ""         PC                Prog_Generator " & AddSpaceToLen(Prog_Version, 19) & " by Juergen """
          Print #fp, "ECHO    ""          \\                                                   and Hardi """
          Print #fp, "ECHO    ""           \\                                                            """
          Print #fp, "ECHO    ""    ________\\_______________                                            """
          Print #fp, "ECHO    ""   |    | # [_] # |  [oo]   _|  " & Get_Language_Str("Achtung: Es wird nur ein Raspberry PICO  """)
          Print #fp, "ECHO    ""   |    |         |  DCC   |C|  " & Get_Language_Str("         Modul verwendet.                """)
          Print #fp, "ECHO    ""   |    | ::::::: |        |A|                                           """
          Print #fp, "ECHO    ""   |    |  _____  |        |N|                                           """
          Print #fp, "ECHO    ""   |    | |     | |         ~|  " & Get_Language_Str("Wenn alles gut geht, dann wird das       """)
          Print #fp, "ECHO    ""   |    | |PICO | |          |  " & Get_Language_Str("Fenster ohne eine weitere Meldung        """)
          Print #fp, "ECHO    ""   |    | |_____| |          |  " & Get_Language_Str("geschlossen (Liest ja eh keiner).        """)
          Print #fp, "ECHO    ""   |    |_________|   [O]    |                                           """
          Print #fp, "ECHO    ""   |    [@] [@] [@]          |  " & Get_Language_Str("Falls Probleme auftreten, dann wird      """)
          Print #fp, "ECHO    ""   |__________________[:::]__|  " & Get_Language_Str("das angezeigt.                           """)
          Print #fp, "ECHO    ""                                                                         """
          Print #fp, "ECHO    "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" """
End Select
    
  Print #fp, ""
  If Win10_or_newer() Then                                                  ' 28.06.20: The find command dosn't work with this code page at Win7 for some reasons. It waits endless ?!?
     Print #fp, "CHCP 65001 >NUL"
  End If
  Print #fp, "ECHO|SET /p=""Verzeichnis: """ ' Echo without linefeed
  Print #fp, "CD" ' show the current directory for debugging
  Print #fp, "ECHO."
  Print #fp, ""
  Print #fp, CommandStr
 'Print #fp, "Pause"   ' Debug
  Print #fp, "ECHO."
  Print #fp, ""
If USE_SUBCOMMAND Then                                                      ' 16.03.20:
  Print #fp, "IF EXIST """ & ResultName & """ (" ' Check if the error file exists
Else
  Print #fp, "IF ERRORLEVEL 1 (" ' Check if ERRORLEVEL >= 1
  Print #fp, "   ECHO Start_Arduino_Result: %ERRORLEVEL% > """ & ResultName & """"
End If
  Print #fp, "   COLOR 4F" ' Yellow on Red
  Print #fp, "   ECHO   ****************************************"
  Print #fp, "   ECHO    " & Get_Language_Str("Da ist was schief gegangen ;-(")
  Print #fp, "   ECHO   ****************************************"
  Print #fp, "   Pause"
  Print #fp, "   )"
  Close #fp
  On Error GoTo 0
  
  Create_Cmd_file = Name
  Exit Function

WriteError:
  Close #fp
  MsgBox Get_Language_Str("Fehler beim schreiben der Datei '") & Name & "'", vbCritical, Get_Language_Str("Fehler beim erzeugen der Arduino Start Datei")
End Function

'------------------------------------------------------------------
Public Function Get_New_Board_Type(FirmwareVer As String) As String         ' 29.10.20:
'------------------------------------------------------------------
' Problem:
' There is no way to detect if the HFUSE is set to support a small (512 byte) boot loader
' because the fueses can't be read over the serial port.
' By default the Arduino dosn't change the HFUSE. Therefore a boot loader size of 2 KB is
' reserved even thow the bootloader uses only 512 byte.
' HFUSE: DA = 2K
'        DE = 512 Byte
'
' We use a special optiboot firmeware version 108.1 to detect if the HFUSE is set to
' support the full memory

  If FirmwareVer = "108.1" Then
        Get_New_Board_Type = BOARD_NANO_FULL
  Else: Get_New_Board_Type = BOARD_NANO_NEW
  End If
End Function

'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Public Function Check_If_Arduino_could_be_programmed_and_set_Board_type(ComPortColumn As Long, BuildOptColumn As Long, ByRef BuildOptions As String, ByRef DeviceSignature As Long, _
        Optional CreateFilesOnly As Boolean = False) As Boolean       ' 20.12.21: Jürgen add CreateFilesOnly for programatically generation of header files
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' The "Buzy" check and the automatic board detection is only active if Autodetect is enabled
' Otherwise the values in the BuildOptColumn are used
' 17.06.20: ToDo: Das stimmt nicht. Die Routine wird immer aufgerufen ;-(
' Result: BuildOptions
  Dim Start_Baudrate As Long, BaudRate As Long, ComPort As Long, Msg As String, Retry As Boolean, AutoDetect As Boolean

  Do
    If CreateFilesOnly Then                                               ' 20.12.21: Jürgen add CreateFilesOnly for programatically generation of header files
        BuildOptions = Cells(SH_VARS_ROW, BuildOptColumn)
        Check_If_Arduino_could_be_programmed_and_set_Board_type = True
        Exit Function
    End If
    
    ' 21.01.2021 Optionally get IP Address from cell left to com port
    If Get_BoardTyp() = "ESP32" And Cells(SH_VARS_ROW, ComPortColumn + 1) <> "" Then
        BuildOptions = Cells(SH_VARS_ROW, BuildOptColumn)
        Check_If_Arduino_could_be_programmed_and_set_Board_type = True
        Exit Function
    End If
    
    
    Retry = False
    If Check_USB_Port_with_Dialog(ComPortColumn) = False Then Exit Function ' Display Dialog if the COM Port is negativ and ask the user to correct it
    
    ' Now we are sure that the com port is positiv. Check if it could be accesed and get the Baud rate
    BuildOptions = Cells(SH_VARS_ROW, BuildOptColumn)

    AutoDetect = InStr(BuildOptions, AUTODETECT_STR) > 0
    If AutoDetect Then
       BuildOptions = Trim(Replace(BuildOptions, AUTODETECT_STR, ""))
       If InStr(BuildOptions, BOARD_NANO_OLD) Or InStr(BuildOptions, BOARD_UNO_NORM) > 0 Then  ' Set the Default Baudrate to speed up the check
             Start_Baudrate = 57600
       Else: Start_Baudrate = 115200
       End If
    End If
    ComPort = val(Cells(SH_VARS_ROW, ComPortColumn))
    If ComPort > 255 Then ComPort = 0                                                 ' 03.03.22: Juergen avoid overrun error
    CheckCOMPort_Txt = Check_If_Port_is_Available_And_Get_Name(ComPort) ' 13.11.20: Old: Check_If_Port_is_Available (ComPort)        ' to set CheckCOMPort_Txt   ' 28.10.20: Jürgen
    
    Dim FirmwareVer As String
    If CheckCOMPort_Txt <> "" Then ' Port available ?                                           ' 13.11.20:
        If Get_BoardTyp() = "ESP32" Then                                             ' 17.04.21: Juergen
              BaudRate = 921600
        ElseIf Get_BoardTyp() = "PICO" Then                                          ' 17.04.21: Juergen
              BaudRate = 921600
        Else: BaudRate = Get_Arduino_Baudrate(ComPort, Start_Baudrate, DeviceSignature, FirmwareVer)
        End If
    End If
    If BaudRate <= 0 Then
          If Check_If_Port_is_Available(ComPort) = False Then
                Msg = Get_Language_Str("Fehler: Es ist kein Arduino an COM Port #1# angeschlossen.")
          ElseIf BaudRate = 0 Then
                Msg = Get_Language_Str("Fehler: Das Gerät am COM Port #1# wurde nicht als Arduino erkannt." & vbCr & _
                                       "Evtl. ist es ein defekter Arduino oder der Bootloader ist falsch.")
          Else: Msg = Get_Language_Str("Fehler: Der COM Port #1# wird bereits von einem anderen Programm benutzt." & vbCr & _
                                       "Das kann z.B. der serielle Monitor der Arduino IDE oder das Farbtestprogramm sein." & vbCr & _
                                       vbCr & _
                                       "Das entsprechende Programm muss geschlossen werden.")
          End If
          Msg = Replace(Msg, "#1#", ComPort) & vbCr & vbCr & Get_Language_Str("Wollen sie es noch mal mit einem anderen Arduino oder einem anderen COM Port versuchen?") & vbCr & vbCr & _
                Get_Language_Str("Mit 'Nein' wird die Meldung ignoriert und versucht den Arduino trotzdem zu programmieren.")
          Select Case MsgBox(Msg, vbYesNoCancel + vbQuestion, Get_Language_Str("Fehler bei der Überprüfung des angeschlossenen Arduinos"))
             Case vbYes: Retry = True
                         With Cells(SH_VARS_ROW, ComPortColumn)
                            .Value = -val(.Value) ' Set to a negativ number to show the COM Port dialog
                         End With
             Case vbCancel:   Exit Function
             Case vbNo: BaudRate = Start_Baudrate
          End Select
    Else
          If AutoDetect Then
             Dim NewBrd As String, LeftArduino As Boolean
             LeftArduino = (ComPortColumn = COMPort_COL)
             If InStr(CheckCOMPort_Txt, "Silicon Labs CP210x") > 0 Then ' Is it an ESP32?         ' 11.11.20:
                NewBrd = BOARD_ESP32
             Else
              'If 1 Or BaudRate <> Start_Baudrate Or DeviceSignature = 2004561 Then ' Change the board type to speed up the check the next time ' 28.10.20: Jürgen: Added "Or DeviceSignature..."
                If DeviceSignature = 2004561 Then                           ' 28.10.20: Jürgen
                    NewBrd = BOARD_NANO_EVERY
                Else
                    If BaudRate = 57600 Then
                          NewBrd = BOARD_NANO_OLD
                    Else: ' An UNO can't be detected every time, but it could be programmed like a Nano with the new bootloader
                          NewBrd = Get_New_Board_Type(FirmwareVer)          ' 29.10.20:
                    End If
                End If
             End If
             Change_Board_Typ LeftArduino, NewBrd ' Write the new board type
             BuildOptions = Cells(SH_VARS_ROW, BuildOptColumn) ' Reread the Build options in case the board type was adapted
             BuildOptions = Trim(Replace(BuildOptions, AUTODETECT_STR, "")) ' Remove the Autodetect flag
          End If
    End If
  Loop While Retry
  
  Check_If_Arduino_could_be_programmed_and_set_Board_type = True
End Function

'---------------------------------------------------------
Private Sub Update_Compile_Time(Optional Start As Boolean)
'---------------------------------------------------------
' Is called by OnTime
  If Start_Compile_Time <> 0 Or Start Then
     If Start Then
           Start_Compile_Time = Time
     Else: StatusMsg_UserForm.Set_ActSheet_Label Format(Time - Start_Compile_Time, "hh:mm:ss")
     End If
     Application.OnTime Now + TimeValue("00:00:01"), "Update_Compile_Time"
  End If
End Sub

'--------------------------------------
Public Sub Stop_Compile_Time_Display()
'--------------------------------------
  Start_Compile_Time = 0
  Unload StatusMsg_UserForm
End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------
Public Function Compile_and_Upload_Prog_to_Arduino(InoName As String, ComPortColumn As Long, BuildOptColumn As Long, SrcDir As String, _
                                                  Optional CreateFilesOnly As Boolean = False) As Boolean                                           ' 20.12.21: Jürgen add CreateFilesOnly for programatically generation of header files
'------------------------------------------------------------------------------------------------------------------------------------------------
  Dim ComPort As String, BuildOptions As String, CommandStr As String, ResFile As String, Mode As String, DeviceSignature As Long, CPUType As String
  
  #If VBA7 Then                                                             ' 05.06.20:
    Dim hWnd As LongPtr: hWnd = Application.hWnd
  #Else
    Dim hWnd As Long:    hWnd = Application.hWnd
  #End If
  
  #If OLD_LIB_CHECK Then
    Check_Required_Libs_and_Install_missing                                 ' 12.09.19:
  #End If
  
  Dim ArduName As String
  If ComPortColumn = COMPort_COL Then
        ArduName = "LED"
  Else: ArduName = Page_ID
  End If
  
  Unload UserForm_Options ' Otherwise the status can't be shown
  StatusMsg_UserForm.ShowDialog Replace(Get_Language_Str("Programmiere #1# Arduino"), "#1#", ArduName) & vbCr & FileNameExt(InoName), "..."
  Update_Compile_Time True
  If Check_If_Arduino_could_be_programmed_and_set_Board_type(ComPortColumn, BuildOptColumn, BuildOptions, DeviceSignature, CreateFilesOnly) = False Then  ' 28.10.20: Jürgen: Added: DeviceSignature
     Stop_Compile_Time_Display
     Exit Function
  End If
  ComPort = "COM" & Cells(SH_VARS_ROW, ComPortColumn) ' 14.07.20: moved "--port" into "Create_Cmd_file" ' 28.10.20: Jürgen: Removed "\\..\"
  
  ' 21.01.2021 Optionally get IP Address from cell left to com port
  If Get_BoardTyp() = "ESP32" And Cells(SH_VARS_ROW, ComPortColumn + 1) <> "" Then
    ComPort = Cells(SH_VARS_ROW, ComPortColumn + 1)
  End If
  
  ResFile = "Start_Arduino_Result.txt"

  If ComPortColumn = COMPort_COL Then
     If Page_ID = "CAN" Then
            Mode = "CAN"
     Else:  Mode = "Left"
     End If
  Else
     Mode = "Right"
  End If
  
  Dim TextColor As Long                                                     ' 27.11.20: Juergen
  TextColor = vbWhite                                                       ' 27.11.20: Juergen
  If Get_BoardTyp() = "ESP32" Or Get_BoardTyp() = "PICO" Then               ' 18.04.21: Juergen
     If Mode = "Right" Then
          MsgBox Get_Language_Str("Wenn der ESP32 verwendet wird, dann wird kein rechter Arduino benötigt"), vbInformation, Get_Language_Str("Rechter Arduino nicht benötigt")
          Exit Function
     Else
          Mode = Get_BoardTyp()
          If Mode = "PICO" And Page_ID = "Selectrix" Then
             MsgBox Replace("Error: The #1# support for '" & Page_ID & "' is not finished yet", "#1#", Mode), vbInformation, Replace("#1# support not finished", "#1#", Mode)
             Exit Function
          End If
     End If
     TextColor = vbYellow                                                   ' 27.11.20: Juergen
  End If
   
  
  If DeviceSignature = 2004561 Then                                         ' 28.10.20: Jürgen
        CPUType = "atmega4809"
  Else: CPUType = "atmega328p"
  End If
  CommandStr = """" & Create_Cmd_file(ResFile, ComPort, BuildOptions, InoName, Mode, SrcDir, CPUType) & """" ' 02.11.19: Added Quotation marks to prevent Problems with special characters in the path like '&'
  
  ' Disable "serial.SerialDiscovery" trial 2                                ' 16.03.20:
  ' Problem: Change the background color to Red is not working
  'CommandStr = CommandStr & " 2>&1 | find /v "" StatusLogger "" | find /v ""serial.SerialDiscovery"" | find /v ""fungsvorgang..."""
  
  If CommandStr = "" Or CommandStr = """""" Then
     Unload StatusMsg_UserForm
     EndProg
  End If
  
  If CreateFilesOnly Then                                               ' 20.12.21: Jürgen add CreateFilesOnly for programatically generation of header files
      Stop_Compile_Time_Display
      Compile_and_Upload_Prog_to_Arduino = True
      Exit Function
  End If

  Dim Res As ShellAndWaitResult
  Dim Start As Variant: Start = Time
  
  If Dir(SrcDir & InoName) = "" Then
     Unload StatusMsg_UserForm
     MsgBox Get_Language_Str("Fehler das Programm ") & InoName & Get_Language_Str(" ist nicht vorhanden in: ") & vbCr & _
            "  '" & SrcDir & "'", vbCritical, Get_Language_Str("Fehler Ino-Programm nicht vorhanden")
     EndProg
  End If
  ChDrive SrcDir
  ChDir SrcDir    ' Change to the directory because the Arduino compiler doesn't like special characters like "ä" in the path

  If Use_Excel_Console Then
      ' 27.11.20 Juergen: use modal ShellExecute user form
      Stop_Compile_Time_Display
       
      Res = UserForm_RunProgram.ShellExecute(CommandStr, 0, _
        Replace(Get_Language_Str("Programmiere #1# Arduino"), "#1#", ArduName) & " - " & FileNameExt(InoName) _
        , PromptUser, &H800000, TextColor, Get_Language_Str("Senden zum Arduino abbrechen?")) ' No timeout to be able to study the results in case of an error
  Else
      Res = ShellAndWait(CommandStr, 0, vbNormalFocus, PromptUser) ' No timeout to be able to study the results in case of an error
      Stop_Compile_Time_Display
  End If
    
  ' Bring Excel to the top                                                ' 19.05.20:
  ' Is not working if an other application has be moved above Excel with Alt+Tab
  ' But this is a feature of Windows.
  '   See: https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setforegroundwindow
  ' But it brings up excel again after the upload to the Arduino
  ' Without this funchion an other program was activated after the upload for some reasons
  Bring_to_front hWnd
  
  Select Case Res
    Case Success, _
         Timeout, _
         UserBreak:  ' No additional error message. They have been shown in the DOS box
    Case Else:       Unload StatusMsg_UserForm
                     MsgBox Get_Language_Str("Fehler ") & Res & Get_Language_Str(" beim Starten des Arduino Programms '") & CommandStr & "'", vbCritical, _
                            Get_Language_Str("Fehler beim Starten des Arduino programms")
  End Select
  
  
  If Dir(ResFile) <> "" Then
    MsgBox Get_Language_Str("Es ist ein Fehler aufgetreten ;-(" & vbCr & _
           vbCr & _
           "Zur Fehlersuche kann man die letzten Änderungen wieder rückgängig machen und es noch mal versuchen. " & vbCr & _
           vbCr & _
           "Kommunikationsprobleme erkennt man an dieser Meldung: " & vbCr & _
           "   avrdude: ser_open(): can't open device ""\\.\COM") & Cells(SH_VARS_ROW, ComPortColumn) & """:" & vbCr & _
           Get_Language_Str("   Das System kann die angegebene Datei nicht finden." & vbCr & _
           "In diesem Fall müssen die Verbindungen überprüft und der Arduino durch einen neuen ersetzt werden." & vbCr & _
           vbCr & _
           "Der Fehler kann auch auftreten wenn der DCC/Selextrix Arduino noch nicht programmiert wurde." & vbCr & _
           "Am besten man steckt den rechten Arduino erst dann ein wenn er benötigt wird." & vbCr & _
           vbCr & _
           "Wenn der Fehler nicht zu finden ist und immer wieder auftritt, dann kann ein Screenshot des " & _
           "vorangegangenen Bildschirms (Nach oben scrollen so dass die erste Meldung nach dem Arduino Bild zu sehen ist) " & _
           "zusammen mit dem Excel Programm und einer ausführlichen Beschreibung an " & vbCr & _
           "  MobaLedLib@gmx.de" & vbCr & _
           "geschickt werden."), vbInformation, Get_Language_Str("Fehler beim Hochladen des Programms")
    EndProg
  Else
    Stop_Compile_Time_Display
    Debug.Print "Compile and upload duration: " & Format(Time - Start, "hh:mm:ss")
    Show_Status_for_a_while Get_Language_Str("Programm erfolgreich hochgeladen. Kompilieren und Hochladen dauerte ") & Format(Time - Start, "hh:mm:ss"), "00:02:00"  ' 05.05.20: Old 30 Sek
    UpdateSimulatorIfNeeded
    Compile_and_Upload_Prog_to_Arduino = True
  End If
End Function


'------------------------------------------------------------------
Public Function Compile_and_Upload_LED_Prog_to_Arduino(Optional CreateFilesOnly As Boolean = False) As Boolean
'------------------------------------------------------------------
  Dim Doit As Boolean
  Doit = CreateFilesOnly
  If CreateFilesOnly = False Then Doit = Upload_the_Right_Arduino_Prog_if_needed()
  If Doit Then
     Compile_and_Upload_LED_Prog_to_Arduino = Compile_and_Upload_Prog_to_Arduino(InoName_LED, COMPort_COL, BUILDOP_COL, ThisWorkbook.Path & "\" & Ino_Dir_LED, CreateFilesOnly)
  End If
End Function

'--------------------------------------------------------------------
Private Function Create_Config_Header_File(Name As String) As Boolean       ' 14.05.20:
'--------------------------------------------------------------------
  Dim fp As Integer
  
  fp = FreeFile
  On Error GoTo WriteError
  Open Name For Output As #fp
  Print #fp, "// This file was generated by '" & ThisWorkbook.Name & "'  " & Time
  Print #fp, ""
  Print #fp, "// Eanble / disable the SPI mode according to the config steet in Excel"
  If Get_Bool_Config_Var("USE_SPI_Communication") Then
        Print #fp, "#define USE_SPI_SLAVE 1"
  Else: Print #fp, "#define USE_SPI_SLAVE 0"
  End If
  Close #fp
  On Error GoTo 0
  Create_Config_Header_File = True
  Exit Function

WriteError:
  MsgBox Get_Language_Str("Fehler beim schreiben der Datei '") & Name & "'", vbCritical, Get_Language_Str("Fehler beim erzeugen der Arduino Header Datei")
End Function

'--------------------------------------------------------------------
Public Function Compile_and_Upload_Prog_to_Right_Arduino() As Boolean
'--------------------------------------------------------------------
  Make_sure_that_Col_Variables_match
  Dim InoName As String
  Select Case Page_ID
    Case "DCC":       InoName = InoName_DCC
    Case "Selectrix": InoName = InoName__SX
    Case "CAN":       MsgBox Get_Language_Str("Für die Steuerung per CAN Bus wird kein zweiter Arduino benötigt." & vbCr & _
                             vbCr & _
                             "Anstelle des rechen Arduinos muss ein CAN Modul (MCP2515) eingesteckt werden"), _
                             vbInformation, Get_Language_Str("Kein Programm für rechten Arduino benötigt")
                      Exit Function
    Case Else:        MsgBox "Interner Fehler: Undefined Page_ID '" & Page_ID & "' in Compile_and_Upload_Prog_to_Right_Arduino", vbCritical, "Interner Fehler"
                      EndProg
  End Select
  
  Dim SrcDir As String
  SrcDir = ThisWorkbook.Path & "\..\examples\" & FileName(InoName) & "\" ' If we are runnung in a development environment we use the local path
  If Dir(SrcDir & InoName) <> "" Then
      Debug.Print "Programm aus lokalem Verzeichnis wird zum Upload verwendet: " & SrcDir
      Application.StatusBar = "Programm aus lokalem Verzeichnis wird zum Upload verwendet: " & SrcDir
  Else
      SrcDir = Get_SrcDirExamp() & FileName(InoName) & "\"
  End If
  
  With ComPortPage().Cells(SH_VARS_ROW, COMPrtR_COL)
       If .Value > 0 Then .Value = -val(.Value)  ' Force to show the new COM Port dialog
  End With
  
  If Create_Config_Header_File(SrcDir & Replace(InoName, ".ino", ".h")) = False Then Exit Function  ' 14.05.20:
  
  If Compile_and_Upload_Prog_to_Arduino(InoName, COMPrtR_COL, BUILDOpRCOL, SrcDir) Then
     Cells(SH_VARS_ROW, R_UPLOD_COL) = "R OK"
     Compile_and_Upload_Prog_to_Right_Arduino = True
  End If
End Function

'--------------------------------------------------------------------------------------
Public Function Ask_To_Upload_the_Right_Arduino_Prog(Focus_Button As String) As Boolean
'--------------------------------------------------------------------------------------
' If the cell COMPrtR_COL is "COM?" the user is asked if the program for the
' right arduino is already uploaded.

  If Not Get_Current_Platform_Bool("NeedLedArduino") Then                                  ' 06.03.21 Juergen - ESP32 doesn't need an extra DCC Arduino, 19.04.21: also not for PICO
    Ask_To_Upload_the_Right_Arduino_Prog = False
    Exit Function
  End If

  Dim Other_Prog As String
  Other_Prog = Replace(Trim(Replace(Prog_for_Right_Ardu, Page_ID & " ", "")), " ", ", ") ' Generate a string with other protocolls which use the right arduino
  
  Dim ComPortUnused As Long
  Select Case Select_COM_Port_UserForm.ShowDialog(Get_Language_Str("Ist das Programm für den rechten Arduino installiert?"), _
                           Get_Language_Str("Programm für ") & Page_ID & " Arduino", _
                           Replace(Replace(Get_Language_Str("Wurde das Programm des rechten #DCC# Arduinos bereits " & _
                           "installiert?" & vbCr & _
                           vbCr & _
                           "Das Programm muss nur beim ersten mal auf den Arduino hochgeladen werden. " & _
                           "Danach muss es nicht mehr verändert werden solange es keine neue Version der " & _
                           "MobaLedLib gibt (oder auf #SELECTRIX# umgestellt wird)." & vbCr & _
                           vbCr & _
                           "Ja: Diese Frage wird nicht mehr gestellt." & vbCr & _
                           "Installieren: Das Programm wird installiert."), "#DCC#", Page_ID), "#SELECTRIX#", Other_Prog), _
                           "DCC_Image", _
                           "I Installieren; A Abbrechen; J Ja", Focus_Button, False, _
                           Replace(Get_Language_Str("#DCC# Programm für aktuelle MobaLedLib Version installiert?"), "#DCC#", Page_ID), ComPortUnused)
         Case 1: Ask_To_Upload_the_Right_Arduino_Prog = True
         Case 2: EndProg
         Case 3: Ask_To_Upload_the_Right_Arduino_Prog = False
  End Select
End Function

'------------------------------------------------------------
Private Function Display_Connect_to_Left_Arduino() As Boolean
'------------------------------------------------------------
  Make_sure_that_Col_Variables_match
  If 3 = Select_COM_Port_UserForm.ShowDialog(Get_Language_Str("Linken Arduino anschließen"), _
                                   Get_Language_Str("Linken (LED) Arduino anstecken"), _
                                   Get_Language_Str("Das Programm wurde erfolgreich auf den rechten Arduino geladen." & vbCr & _
                                   vbCr & _
                                   "Dieser Vorgang muss nur ein mal durchgeführt werden. In Zukunft " & _
                                   "wird nur noch das Programm des linken (LED) Arduinos verändert." & vbCr & _
                                   vbCr & _
                                   "Das USB Kabel muss jetzt an den linken Arduino angeschlossen werden." & vbCr & _
                                   vbCr & _
                                   "Wenn das geschehen ist die ""OK"" Taste betätigen"), _
                                   "LED_Image", _
                                   Get_Language_Str("; A Abbrechen; O OK"), "Default_Button", False, _
                                   Get_Language_Str("Umstecken zum Linken Arduino"), 0) _
                             Then Display_Connect_to_Left_Arduino = True
End Function

'--------------------------------------------------------------------
Private Function Upload_the_Right_Arduino_Prog_if_needed() As Boolean
'--------------------------------------------------------------------
' Uploade the program to the right arduino if
' it's not the CAN page
' and not uploadeded before (R_OK)
' and the the sheet uses the right arduino (DCC Adresses/ SX Channels entered)
  Make_sure_that_Col_Variables_match
  If Page_ID <> "CAN" And Cells(SH_VARS_ROW, R_UPLOD_COL) <> "R OK" And Ext_AddrTxt_Used() Then
     If Ask_To_Upload_the_Right_Arduino_Prog("Default_Button") Then
           With Cells(SH_VARS_ROW, COMPrtR_COL)
             If .Value > 0 Then .Value = -val(.Value) ' Force to show the COM port dialog for the right Arduino
           End With
           If Compile_and_Upload_Prog_to_Right_Arduino() = False Then Exit Function
           
           If Display_Connect_to_Left_Arduino() = False Then Exit Function
           With Cells(SH_VARS_ROW, COMPort_COL)
             If .Value > 0 Then .Value = -val(.Value) ' Force to show the COM port dialog for the left Arduino
           End With
     Else: Cells(SH_VARS_ROW, R_UPLOD_COL) = "R OK"
     End If
  End If
  Upload_the_Right_Arduino_Prog_if_needed = True
End Function


'----------------------------------------------------------------------
Public Sub Ask_to_Upload_and_Compile_and_Upload_Prog_to_Right_Arduino()
'----------------------------------------------------------------------
  Make_sure_that_Col_Variables_match
  If Ask_To_Upload_the_Right_Arduino_Prog("Check_Button") Then
     Compile_and_Upload_Prog_to_Right_Arduino
  End If
End Sub

#If OLD_LIB_CHECK Then                                                      ' 30.05.20:
    
    '--------------------------------------------------------------------------------
    Private Function Create_InstalLib_Cmd_file(Optional LibNames As String) As String
    '--------------------------------------------------------------------------------
    ' Arduino start Parameters see:
    '   https://github.com/arduino/Arduino/blob/master/build/shared/manpage.adoc
    ' Extract:
    '  --install-library library name[:version]
    '       Fetches available libraries list and install the specified one. If version is omitted, the latest is installed.
    '       If a library with the same version is already installed, nothing is installed and program exits with exit code 1.
    '       If a library with a different version is already installed, its replaced. Multiple libraries can be specified, separated by a comma.
    
    ' Ein mal habe ich beobachtet, dass die MobaLedLin in ein anderes Verzeichnis installiert wurde
    ' Evtl. lag das daran, das der Library manager offen war
    ' Das problem tritt nicht auf wenn nur die Arduino IDE offen
    
    
      Dim ResultName As String
      ResultName = "Start_Arduino_Result.txt"
      
      
      If Dir(ResultName) <> "" Then Kill ResultName
      
      
      If LibNames = "" Then LibNames = Get_String_Config_Var("AddLibNames")
      
      Dim CommandStr As String
      CommandStr = """" & Find_ArduinoExe() & """ --install-library """ & LibNames & """"
      Dim fp As Integer, Name As String
      
      fp = FreeFile
      Name = ThisWorkbook.Path & "\Start_Arduino.cmd"
      On Error GoTo WriteError
      Open Name For Output As #fp
      Print #fp, "@ECHO OFF"
      Print #fp, "COLOR 5F" ' White on Purple
      Print #fp, "REM This file was generated by '" & ThisWorkbook.Name & "'  " & Time
      Print #fp, "ECHO --------------------------------------------------------------------------"
      Print #fp, "ECHO " & Get_Language_Str("Aktualisiere die Bibliotheken ") & LibNames & " ..."
      Print #fp, "ECHO --------------------------------------------------------------------------"
      Print #fp, "ECHO."
      Print #fp, ""
      Print #fp, CommandStr
      Print #fp, "ECHO."
      Print #fp, ""
     'Print #fp, "Pause"
      Print #fp, "IF ERRORLEVEL 1 (" ' Check if ERRORLEVEL >= 1
      Print #fp, "   COLOR 4F" ' Yellow on Red
      Print #fp, "   ECHO Start_Arduino_Result: %ERRORLEVEL% > """ & ResultName & """"
      Print #fp, "   ECHO   ********************************************"
      Print #fp, "   ECHO     " & Get_Language_Str("Da ist was schief gegangen ;-(") & "             ERRORLEVEL %ERRORLEVEL%"
      Print #fp, "   ECHO   ********************************************"
      Print #fp, "   Pause"
      Print #fp, "   )"
      Close #fp
      On Error GoTo 0
      
      Create_InstalLib_Cmd_file = Name
      
      Exit Function
    
WriteError:
      MsgBox Get_Language_Str("Fehler beim schreiben der Datei '") & Name & "'", vbCritical, Get_Language_Str("Fehler beim erzeugen der Arduino Start Datei")
    End Function
    
    
    '---------------------------------------------------------
    Private Sub Install_Libraries(Optional LibNames As String)
    '---------------------------------------------------------
      Dim CommandStr As String
      CommandStr = Create_InstalLib_Cmd_file(LibNames)
      Dim Res As ShellAndWaitResult
      Dim Start As Variant: Start = Time
      
      Res = ShellAndWait(CommandStr, 0, vbNormalFocus, PromptUser) ' No timeout to be able to study the results in case of an error
      Select Case Res
        Case Success, Timeout: ' No additional error message. They have been shown in the DOS box
        Case Else:             MsgBox Get_Language_Str("Fehler ") & Res & Get_Language_Str(" beim starten des Arduino Programms '") & CommandStr & "'", _
                                      vbCritical, Get_Language_Str("Fehler beim Starten des Arduino programms")
      End Select
      
      Dim SrcDir As String
      SrcDir = ThisWorkbook.Path & "\"
      ChDrive SrcDir
      ChDir SrcDir    ' Change to the directory because the Arduino compiler doesn't like special characters like "ä" in the path
      
      Const ResFile = "Start_Arduino_Result.txt"
      If Dir(ResFile) <> "" Then
        MsgBox Get_Language_Str("Es ist ein Fehler aufgetreten ;-(" & vbCr & _
               vbCr & _
               "Wenn der Fehler immer wieder auftritt, dann kann ein Screenshot des " & _
               "vorangegangenen Bildschirms und einer ausführlichen Beschreibung an " & vbCr & _
               "  MobaLedLib@gmx.de" & vbCr & _
               "geschickt werden."), vbInformation, Get_Language_Str("Fehler beim Installieren der Bibliotheken")
        EndProg
      Else
        Debug.Print "Compile and upload duration: " & Format(Time - Start, "hh:mm:ss")
        Show_Status_for_a_while Get_Language_Str("Bibliotheken erfolgreich installiert. (Dauer: ") & Format(Time - Start, "hh:mm:ss") & ")", "00:00:30"
      End If
      
    End Sub
    
    '-----------------------------------------------
    Private Function Check_Required_Libs() As String
    '-----------------------------------------------
    ' Return a list of missing libraries
    '
    ' ToDo: Check the required version of existing libraries
    
      Const LibPath = "\Arduino\libraries\MobaLedLib\examples\00.Overview"
      
      Dim LibDir As String
      LibDir = Replace(Environ("APPDATA"), "AppData\Roaming", "") & "Documents\Arduino\libraries\"
    
      On Error GoTo LibDirMissing
      If Dir(LibDir, vbDirectory) = "" Then GoTo LibDirMissing ' 06.10.19: Added: vbDirectory to detect also directories without files
      On Error GoTo 0
      
      Dim Name As Variant, LibNames As String
      LibNames = Get_String_Config_Var("AddLibNames")
      For Each Name In Split(LibNames, ",")
          If Dir(LibDir & Name & "\", vbDirectory) = "" Then ' 06.10.19: Added: vbDirectory to detect also directories without files
             Check_Required_Libs = Check_Required_Libs & Name & ","
          End If
      Next
      
      Check_Required_Libs = DelLast(Check_Required_Libs)
      Exit Function
      
LibDirMissing:
      MsgBox Get_Language_Str("Fehler: Das Arduino Bibliotheksverzeichnis wurde nicht gefunden:") & vbCr & _
             "  '" & LibDir & "'", vbCritical, Get_Language_Str("Fehler Bibliotheksverzeichnis nicht vorhanden")
      EndProg
    End Function
    
    'UT-----------------------------------
    Private Sub Test_Check_Required_Libs()
    'UT-----------------------------------
      Debug.Print "Check_Required_Libs: " & Check_Required_Libs
    End Sub
    
    '---------------------------------------------------
    Public Sub Check_Required_Libs_and_Install_missing()
    '---------------------------------------------------
      If True = Get_Bool_Config_Var("Lib_Installed_other") Then Exit Sub
      
      Dim MissingLibs As String
      MissingLibs = Check_Required_Libs()
      If MissingLibs = "" Then Exit Sub
      
      Select Case MsgBox(Get_Language_Str("Achtung: Die folgenden Bibliotheken wurden nicht im " & _
                         "Standardverzeichnis von Arduino gefunden:") & vbCr & _
                         "  " & MissingLibs & vbCr & _
                         vbCr & _
                         Get_Language_Str("Sollen die Bibliotheken jetzt installiert werden?" & vbCr & _
                         vbCr & _
                         "Ja: Die Bibliotheken werden aus dem Internet installiert" & vbCr & _
                         vbCr & _
                         "Nein: Es wird davon ausgegangen, dass die Bibliotheken in " & vbCr & _
                         "einem anderen Verzeichnis verfügbar sind (Für Experten):" & vbCr & _
                         "Wenn beim kompilieren eine fehlende Datei gemeldet wird, dann liegt " & _
                         "das vermutlich an einer fehlenden oder veralteten Bibliothek. " & _
                         "In dem Fall muss das Programm neu gestartet werden und die Bibliotheken " & _
                         "installiert werden."), vbYesNoCancel + vbQuestion, _
                         Get_Language_Str("Fehlende Bibliotheken erkannt"))
         Case vbYes:     ' Only the missing libraries are installed because the Installer returns 1 if
                         ' one library exists in the same version. => Looks like an error.
                         ' This very is importand tor the MobaLedLib because otherwise the running Excel
                         ' sheed may be overwritten
                         Install_Libraries MissingLibs
         Case vbNo:      Set_Bool_Config_Var "Lib_Installed_other", True
         Case vbCancel:  EndProg
      End Select
    End Sub

#End If ' OLD_LIB_CHECK


